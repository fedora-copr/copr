#! /usr/bin/python

# Copyright (C) 2018 Red Hat, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
Print the log of copr-rpmbuild process to stdout

This script always succeeds (exit status 0), as long as the copr-rpmbuild
process was at all started before.  If the copr-rpmbuild is still running, the
script keeps waiting for the process to end and keeps appending the output to
stdout.
"""

import logging
import os
import sys
import time
from copr_rpmbuild.helpers import read_config

MAX_WAIT_FOR_RPMBUILD = 120

def _get_stdout_logger():
    log = logging.getLogger(__name__)
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(logging.Formatter("%(message)s"))
    log.addHandler(log)
    return log

LOG = _get_stdout_logger()

def _tail_log(config):
    live_log = config.get("main", "logfile")
    pidfile = config.get("main", "logger_pidfile")

    for fname in [pidfile, live_log]:
        if not os.path.exists(fname):
            print("File {0} doesn't exist, yet".format(fname))
            return

    with open(pidfile, "r") as pidfd:
        pid = int(pidfd.read().strip())

    tail = "/usr/bin/tail"
    args = [
        tail, "-F", "-n", "+0",
        "--pid={}".format(pid),
        live_log,
    ]
    os.execv(tail, args)

def _main():
    config = read_config()
    start = time.time()
    while True:
        # If startup succeeds, this calls execv(), which replaces the script and
        # prevents any further commands from running.
        _tail_log(config)

        # Couldn't start following the logfile, retrying.
        if time.time() - start > MAX_WAIT_FOR_RPMBUILD:
            print("Unable to wait for copr-rpmbuild process, exit.")
            return 1
        time.sleep(5)


if __name__ == "__main__":
    sys.exit(_main())
