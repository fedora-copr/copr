---
- name: Generate the private key for the self-signed certificate
  community.crypto.openssl_privatekey:
    path: "/root/self-signed.key"
    size: 4096
    type: RSA
    mode: '0600'
    owner: root
  register: key_status

- name: Generate Certificate Signing Request (CSR) with CA Constraints
  community.crypto.openssl_csr:
    path: "/root/self-signed.csr"
    privatekey_path: "/root/self-signed.key"
    basic_constraints:
      - CA:TRUE
      - pathlen:0
    basic_constraints_critical: true
    key_usage:
      - digitalSignature
      - cRLSign
      - keyCertSign
    subject_alt_name:
      - 'DNS:localhost'      # Required for connecting via hostname 'localhost'
      - 'DNS:{{ ansible_host }}'
      - 'IP:{{ ansible_host }}' # also as IP
      - 'IP:127.0.0.1'       # Recommended for connecting via the loopback IP
    common_name: "localhost"
    organization_name: "on"
    country_name: US

- name: Generate the self-signed certificate
  community.crypto.x509_certificate:
    path: /root/self-signed.pem
    privatekey_path: "{{ key_status.filename }}"
    provider: selfsigned
    csr_path: /root/self-signed.csr

- name: Check be-fe token file
  stat:
    path: "{{ item.path }}"
  loop:
    - name: be-fe token
      path: /root/be-fe-token
    - name: postgresql password
      path: /root/fe-postgres-password
  register: stat_result

- name: 'Generate secure token: {{ item.item.name }}'
  copy:
    content: "{{ lookup('ansible.builtin.password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
    dest: "{{ item.item.path }}"
    mode: "0400"
  no_log: true
  when: not item.stat.exists
  loop: "{{ stat_result.results }}"

- name: ðŸ”‘ generate backend -> builder keypair
  community.crypto.openssh_keypair:
    path: /root/backend_builder
    type: ed25519
    comment: "Backend â†’ Builder key"
    mode: '0600'
