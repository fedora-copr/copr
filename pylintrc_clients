# Copr clients pylint configuration

[MASTER]
# Pickle collected data for later comparisons.
persistent=no

init-hook=
    import os
    import subprocess
    gitrootdir = subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).decode("utf-8").strip()
    sys.path.insert(0, os.path.join(gitrootdir, '.pylintpath'))
    import copr_pylintrc
    copr_pylintrc.init()


# Our own pylint transformations.
load-plugins=pylint_copr_plugin

[MESSAGES CONTROL]
# Reasoning for wide warning ignore
# ---------------------------------
# import-error
#     This is to fix our Jenkins CI where we do not have all the build
#     requirements for all our sub-components.  We can afford not listening to
#     this error because our packaging CI would discover the problems anyways.
# useless-object-inheritance
#     We need to keep compatibility with Python 2 for EL6 and EL7.
# consider-using-f-string
#     We still support Python 2.7 (EL7) for clients.
# unspecified-encoding
#     Python2.7: TypeError: 'encoding' is an invalid keyword argument for this function
# too-many-instance-attributes
#     Local variables are often pretty hard to avoid, yet switching to
#     dataclasses almost never makes sense.
disable=import-error,useless-object-inheritance,super-with-arguments,consider-using-f-string,unspecified-encoding,too-many-instance-attributes

[VARIABLES]
# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=_|dummy


[BASIC]
# Regular expression which should only match correct module names
module-rgx=([a-zA-Z_][a-zA-Z0-9_]+)$

# Regular expression which should only match correct module level names
const-rgx=(([a-zA-Z_][a-zA-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[a-zA-Z_][a-zA-Z0-9_]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-zA-Z0-9_]{,42}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-zA-Z0-9_]{,42}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-zA-Z0-9_]{,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-zA-Z0-9_]{,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-zA-Z0-9_]{,30}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression which should only match correct class sttribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,42}|(__.*__))$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

[DESIGN]

# Maximum number of arguments for function / method
max-args=10

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=20

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=1

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


[FORMAT]
# Maximum number of characters on a single line.
max-line-length=120

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=
