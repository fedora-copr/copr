copr-cli(1)
==========
:man source:  copr
:man manual:  COPR

NAME
----
copr-cli - command line interface for the Copr service


SYNOPSIS
--------
copr-cli [-h] [--version] [--config CONFIG] {list,create,build} ...

DESCRIPTION
-----------

This command allows you to interact with the Copr service from the command line.

You need to generate an API key first (see the API KEY section below).

OPTIONS
-------

-h, --help::
show this help message and exit

--version::
show the program's version number and exit

--config::
path to an alternative configuration file (default is ~/.config/copr).

ACTIONS
-------

list [username]::
List all the projects of the provided username. If no username is provided,
then your projects are listed.

create::
Create a new project.

delete::
Delete an entire project.

build::
Build packages for a specified project.

status::
Get the status of the build.

cancel::
Cancel a build of given id.

download-build::
Download a build to local directory.

modify::
Modify existing copr


`copr-cli create [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr-cli create [-h] --chroot CHROOTS [--repo REPOS]
                       [--initial-pkgs PKGS]
                       [--description DESCRIPTION]
                       [--instructions INSTRUCTIONS]
                       name

--chroot::
Chroot to use for this project. Can be specified multiple times, but at least one must be present.

--repo::
Repository to add to this project. Can be specified multiple times.

--initial-pkgs::
List of packages to build in this new project. Can be specified multiple times.

--description::
Description of the project.

--instructions::
Instructions for the project.


`copr-cli build [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr-cli build [-h] [-r, --chroot CHROOTS] [--memory MEMORY] [--timeout TIMEOUT] [--nowait]
                      project PKG [PKG ...]

-r, --chroot::
If you don't need this build for all the project's chroots. You can use it several times for each chroot you need.

--memory::
Override memory for this build. This is actually not used and it have no effect.

--timeout::
Override timeout for this build. This is actually not used and it have no effect.

--nowait::
Don't wait for build completion

project::
The project build the package in. This can be a simple name of some of
your projects. Alternatively, you can specify it as username/project or
@groupname/project. This way you can build into the project of another
user or group, provided you have the permissions to do so.

PKG::
This can be either file on your local workstation or URL of the package to build. When URL is used, then the package must be placed on a public web or
ftp server. Note that you cannot combine local file paths and URLs in one command line and local-file builds are limited to the first specified PKG.
This limitation comes from the COPR API.


`copr-cli buildpypi [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr buildpypi [-h] [-r, --chroot CHROOTS] [--memory MEMORY] [--timeout TIMEOUT] [--nowait]
                      [--pythonversions [VERSION [VERSION ...]]] [--packageversion PYPIVERSION] 
                      --packagename PYPINAME
                      project

--pythonversions [VERSION [VERSION ...]]::
For what Python versions to build (by default: 3 2)

--packageversion PYPIVERSION::
Version of the PyPI package to be built (by default latest)

--packagename PYPINAME::
Name of the PyPI package to be built, required.


For the rest of the arguments, see `copr-cli build` command above.


`copr-cli buildtito [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr buildtito [-h] [--memory MEMORY] [--timeout TIMEOUT] [--nowait]
                      [-r CHROOTS] [--git-url URL] [--git-dir DIRECTORY]
                      [--git-branch BRANCH] [--test]
                      project

--git-url URL::
Url to a project managed by Tito, required.

--git-dir DIRECTORY::
Relative path from Git root to directory containing .spec file.

--git-branch BRANCH::
Checokut specific branch on the repository.

--test::
To build from the last commit instead of the last release tag.


For the rest of the arguments, see `copr-cli build` command above.


`copr-cli buildmock [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr buildmock [-h] [--memory MEMORY] [--timeout TIMEOUT] [--nowait]
                      [-r CHROOTS] [--scm-type TYPE] [--scm-url URL]
                      [--scm-branch BRANCH] [--spec FILE]
                      project

--scm-type TYPE::
Specify versioning tool, default is 'git'.

--scm-url URL::
Url to a project versioned by Git or SVN, required.

--scm-branch BRANCH::
Checokut specific branch on the repository.

--spec FILE::
Relative path from SCM root to .spec file, required.


For the rest of the arguments, see `copr-cli build` command above.


`copr-cli download-build [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr-cli download-build [-h] [-d, --dest DESTINATION]
                               [-r, --chroot CHROOT]
                               build_id

build_id::
Download built packages for build identified by build_id.

-d, --dest::
Base directory to fetch files. Using `pwd` by default

-r, --chroot::
Fetch only selected chroots. Can be specified multiple times.\


`copr-cli modify [options]`
~~~~~~~~~~~~~~~~~~~~~~~~~~

usage: copr-cli modify [-h] [--repo REPOS]
                       [--description DESCRIPTION]
                       [--instructions INSTRUCTIONS]
                       [--disable_createrepo DISABLE_CREATEREPO]
                       name

Alters only specified project property.

--repo::
Repository to add to this project. Can be specified multiple times.

--description::
Description of the project.

--instructions::
Instructions for the project.

--disable_createrepo::
Disables automatic repository metadata generation. Accepted values for DISABLE_CREATEREPO: true/false.


EXAMPLES
--------

 copr-cli build myproject some.src.rpm
 copr-cli build someone_else/project some.src.rpm
 copr-cli build -r fedora-24-x86_64 -r fedora-24-i386 "@somegroup/project" some.src.rpm


EXIT STATUS
-----------
Normally, the exit code is 0 when everything goes well. But if not, we could get:
1 - Bad request like wrong project name, insufficient rights etc.
    Also might happen when user interrupts the operation when they shouldn't.
2 - Wrong arguments given.
3 - Bad or no configuration.
4 - Build fails when Cli is waiting for the result.
5 - Communication error between Cli and server.
    This issue probably means bug and should be reported.


API KEY
-------

Visit the page https://copr.fedoraproject.org/api/ to obtain an API token.
This token must be saved in the file `~/.config/copr` in the following
format:

 [copr-cli]
 username = msuchy
 login = Y57wcg==##fkfaxbkjhuoiebfafadl
 token = vbfseelqdebzedukgombekmuvbkqwo
 copr_url = https://copr.fedoraproject.org

Be aware that API tokens have an expiration date. The expiration date for
your token is listed on the /api page.

USING DIFFERENT COPR INSTANCE
-----------------------------

If you plan to run `copr` client against non-default Copr instance, the API
token is available on the http://YOUR.COPR.URL/api/ page.  You can either
replace your default `~/.config/copr` configuration file, or rather use
alternative file with a shell alias

    alias your_copr='copr --config ~/.config/your-copr'

inserted into your profile.


AUTHORS
-------
Miroslav Such√Ω <msuchy@redhat.com>
